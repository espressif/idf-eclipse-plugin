/*
 * generated by Xtext 2.28.0
 */
grammar InternalIDFComponentDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.espressif.idf.componen.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.espressif.idf.componen.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.espressif.idf.componen.services.IDFComponentDslGrammarAccess;

}

@parser::members {

 	private IDFComponentDslGrammarAccess grammarAccess;

    public InternalIDFComponentDslParser(TokenStream input, IDFComponentDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ComponentModel";
   	}

   	@Override
   	protected IDFComponentDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleComponentModel
entryRuleComponentModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentModelRule()); }
	iv_ruleComponentModel=ruleComponentModel
	{ $current=$iv_ruleComponentModel.current; }
	EOF;

// Rule ComponentModel
ruleComponentModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getComponentModelAccess().getElementsTypeParserRuleCall_0());
			}
			lv_elements_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getComponentModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"com.espressif.idf.componen.IDFComponentDsl.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getDescriptionParserRuleCall_0());
		}
		this_Description_0=ruleDescription
		{
			$current = $this_Description_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getVersionInfoParserRuleCall_1());
		}
		this_VersionInfo_1=ruleVersionInfo
		{
			$current = $this_VersionInfo_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getDependenciesCompParserRuleCall_2());
		}
		this_DependenciesComp_2=ruleDependenciesComp
		{
			$current = $this_DependenciesComp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getURLParserRuleCall_3());
		}
		this_URL_3=ruleURL
		{
			$current = $this_URL_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getCOMMENTParserRuleCall_4());
		}
		this_COMMENT_4=ruleCOMMENT
		{
			$current = $this_COMMENT_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='description:'
		{
			newLeafNode(otherlv_0, grammarAccess.getDescriptionAccess().getDescriptionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDescriptionAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDescriptionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleVersionInfo
entryRuleVersionInfo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVersionInfoRule()); }
	iv_ruleVersionInfo=ruleVersionInfo
	{ $current=$iv_ruleVersionInfo.current; }
	EOF;

// Rule VersionInfo
ruleVersionInfo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='version:'
		{
			newLeafNode(otherlv_0, grammarAccess.getVersionInfoAccess().getVersionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVersionInfoAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVersionInfoRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleURL
entryRuleURL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getURLRule()); }
	iv_ruleURL=ruleURL
	{ $current=$iv_ruleURL.current; }
	EOF;

// Rule URL
ruleURL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='url:'
		{
			newLeafNode(otherlv_0, grammarAccess.getURLAccess().getUrlKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getURLAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getURLRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleCOMMENT
entryRuleCOMMENT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCOMMENTRule()); }
	iv_ruleCOMMENT=ruleCOMMENT
	{ $current=$iv_ruleCOMMENT.current; }
	EOF;

// Rule COMMENT
ruleCOMMENT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getCOMMENTAccess().getNumberSignKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCOMMENTAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCOMMENTRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)*
	)
;

// Entry rule entryRuleDependenciesComp
entryRuleDependenciesComp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependenciesCompRule()); }
	iv_ruleDependenciesComp=ruleDependenciesComp
	{ $current=$iv_ruleDependenciesComp.current; }
	EOF;

// Rule DependenciesComp
ruleDependenciesComp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dependencies:'
		{
			newLeafNode(otherlv_0, grammarAccess.getDependenciesCompAccess().getDependenciesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDependenciesCompAccess().getFeaturesFeatureParserRuleCall_1_0());
				}
				lv_features_1_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDependenciesCompRule());
					}
					add(
						$current,
						"features",
						lv_features_1_0,
						"com.espressif.idf.componen.IDFComponentDsl.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getIDFParserRuleCall_0());
		}
		this_IDF_0=ruleIDF
		{
			$current = $this_IDF_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getOVERRIDE_PATHParserRuleCall_1());
		}
		this_OVERRIDE_PATH_1=ruleOVERRIDE_PATH
		{
			$current = $this_OVERRIDE_PATH_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getCOMPONENT_NAMEParserRuleCall_2());
		}
		this_COMPONENT_NAME_2=ruleCOMPONENT_NAME
		{
			$current = $this_COMPONENT_NAME_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIDF
entryRuleIDF returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIDFRule()); }
	iv_ruleIDF=ruleIDF
	{ $current=$iv_ruleIDF.current; }
	EOF;

// Rule IDF
ruleIDF returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='idf:'
		{
			newLeafNode(otherlv_0, grammarAccess.getIDFAccess().getIdfKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getIDFAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIDFRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleCOMPONENT_NAME
entryRuleCOMPONENT_NAME returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCOMPONENT_NAMERule()); }
	iv_ruleCOMPONENT_NAME=ruleCOMPONENT_NAME
	{ $current=$iv_ruleCOMPONENT_NAME.current; }
	EOF;

// Rule COMPONENT_NAME
ruleCOMPONENT_NAME returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getCOMPONENT_NAMEAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCOMPONENT_NAMERule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCOMPONENT_NAMEAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCOMPONENT_NAMEAccess().getFeaturesCOMPONENT_NAME_FEATUREParserRuleCall_2_0());
				}
				lv_features_2_0=ruleCOMPONENT_NAME_FEATURE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCOMPONENT_NAMERule());
					}
					add(
						$current,
						"features",
						lv_features_2_0,
						"com.espressif.idf.componen.IDFComponentDsl.COMPONENT_NAME_FEATURE");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCOMPONENT_NAME_FEATURE
entryRuleCOMPONENT_NAME_FEATURE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCOMPONENT_NAME_FEATURERule()); }
	iv_ruleCOMPONENT_NAME_FEATURE=ruleCOMPONENT_NAME_FEATURE
	{ $current=$iv_ruleCOMPONENT_NAME_FEATURE.current; }
	EOF;

// Rule COMPONENT_NAME_FEATURE
ruleCOMPONENT_NAME_FEATURE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCOMPONENT_NAME_FEATUREAccess().getRULESParserRuleCall_0());
		}
		this_RULES_0=ruleRULES
		{
			$current = $this_RULES_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCOMPONENT_NAME_FEATUREAccess().getPUBLICParserRuleCall_1());
		}
		this_PUBLIC_1=rulePUBLIC
		{
			$current = $this_PUBLIC_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePUBLIC
entryRulePUBLIC returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPUBLICRule()); }
	iv_rulePUBLIC=rulePUBLIC
	{ $current=$iv_rulePUBLIC.current; }
	EOF;

// Rule PUBLIC
rulePUBLIC returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='public:'
		{
			newLeafNode(otherlv_0, grammarAccess.getPUBLICAccess().getPublicKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPUBLICAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPUBLICRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleOVERRIDE_PATH
entryRuleOVERRIDE_PATH returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOVERRIDE_PATHRule()); }
	iv_ruleOVERRIDE_PATH=ruleOVERRIDE_PATH
	{ $current=$iv_ruleOVERRIDE_PATH.current; }
	EOF;

// Rule OVERRIDE_PATH
ruleOVERRIDE_PATH returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='override_path:'
		{
			newLeafNode(otherlv_0, grammarAccess.getOVERRIDE_PATHAccess().getOverride_pathKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOVERRIDE_PATHAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOVERRIDE_PATHRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRULES
entryRuleRULES returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRULESRule()); }
	iv_ruleRULES=ruleRULES
	{ $current=$iv_ruleRULES.current; }
	EOF;

// Rule RULES
ruleRULES returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rules:'
		{
			newLeafNode(otherlv_0, grammarAccess.getRULESAccess().getRulesKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRULESAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRULESRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
