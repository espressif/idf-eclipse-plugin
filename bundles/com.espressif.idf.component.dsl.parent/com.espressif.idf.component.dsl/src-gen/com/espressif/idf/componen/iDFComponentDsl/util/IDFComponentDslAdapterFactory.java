/**
 * generated by Xtext 2.28.0
 */
package com.espressif.idf.componen.iDFComponentDsl.util;

import com.espressif.idf.componen.iDFComponentDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.espressif.idf.componen.iDFComponentDsl.IDFComponentDslPackage
 * @generated
 */
public class IDFComponentDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static IDFComponentDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IDFComponentDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = IDFComponentDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IDFComponentDslSwitch<Adapter> modelSwitch =
    new IDFComponentDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseComponentModel(ComponentModel object)
      {
        return createComponentModelAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseDescription(Description object)
      {
        return createDescriptionAdapter();
      }
      @Override
      public Adapter caseVersionInfo(VersionInfo object)
      {
        return createVersionInfoAdapter();
      }
      @Override
      public Adapter caseURL(URL object)
      {
        return createURLAdapter();
      }
      @Override
      public Adapter caseCOMMENT(COMMENT object)
      {
        return createCOMMENTAdapter();
      }
      @Override
      public Adapter caseDependenciesComp(DependenciesComp object)
      {
        return createDependenciesCompAdapter();
      }
      @Override
      public Adapter caseFeature(Feature object)
      {
        return createFeatureAdapter();
      }
      @Override
      public Adapter caseIDF(IDF object)
      {
        return createIDFAdapter();
      }
      @Override
      public Adapter caseCOMPONENT_NAME(COMPONENT_NAME object)
      {
        return createCOMPONENT_NAMEAdapter();
      }
      @Override
      public Adapter caseCOMPONENT_NAME_FEATURE(COMPONENT_NAME_FEATURE object)
      {
        return createCOMPONENT_NAME_FEATUREAdapter();
      }
      @Override
      public Adapter casePUBLIC(PUBLIC object)
      {
        return createPUBLICAdapter();
      }
      @Override
      public Adapter caseOVERRIDE_PATH(OVERRIDE_PATH object)
      {
        return createOVERRIDE_PATHAdapter();
      }
      @Override
      public Adapter caseRULES(RULES object)
      {
        return createRULESAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.ComponentModel <em>Component Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.ComponentModel
   * @generated
   */
  public Adapter createComponentModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.Description <em>Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.Description
   * @generated
   */
  public Adapter createDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.VersionInfo <em>Version Info</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.VersionInfo
   * @generated
   */
  public Adapter createVersionInfoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.URL <em>URL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.URL
   * @generated
   */
  public Adapter createURLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.COMMENT <em>COMMENT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.COMMENT
   * @generated
   */
  public Adapter createCOMMENTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.DependenciesComp <em>Dependencies Comp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.DependenciesComp
   * @generated
   */
  public Adapter createDependenciesCompAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.Feature <em>Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.Feature
   * @generated
   */
  public Adapter createFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.IDF <em>IDF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.IDF
   * @generated
   */
  public Adapter createIDFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.COMPONENT_NAME <em>COMPONENT NAME</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.COMPONENT_NAME
   * @generated
   */
  public Adapter createCOMPONENT_NAMEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.COMPONENT_NAME_FEATURE <em>COMPONENT NAME FEATURE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.COMPONENT_NAME_FEATURE
   * @generated
   */
  public Adapter createCOMPONENT_NAME_FEATUREAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.PUBLIC <em>PUBLIC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.PUBLIC
   * @generated
   */
  public Adapter createPUBLICAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.OVERRIDE_PATH <em>OVERRIDE PATH</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.OVERRIDE_PATH
   * @generated
   */
  public Adapter createOVERRIDE_PATHAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.espressif.idf.componen.iDFComponentDsl.RULES <em>RULES</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.espressif.idf.componen.iDFComponentDsl.RULES
   * @generated
   */
  public Adapter createRULESAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //IDFComponentDslAdapterFactory
