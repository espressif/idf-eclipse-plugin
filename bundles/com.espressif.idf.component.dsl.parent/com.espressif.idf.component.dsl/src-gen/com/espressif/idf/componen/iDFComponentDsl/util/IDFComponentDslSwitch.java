/**
 * generated by Xtext 2.28.0
 */
package com.espressif.idf.componen.iDFComponentDsl.util;

import com.espressif.idf.componen.iDFComponentDsl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.espressif.idf.componen.iDFComponentDsl.IDFComponentDslPackage
 * @generated
 */
public class IDFComponentDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static IDFComponentDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IDFComponentDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = IDFComponentDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case IDFComponentDslPackage.COMPONENT_MODEL:
      {
        ComponentModel componentModel = (ComponentModel)theEObject;
        T result = caseComponentModel(componentModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.DESCRIPTION:
      {
        Description description = (Description)theEObject;
        T result = caseDescription(description);
        if (result == null) result = caseType(description);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.VERSION_INFO:
      {
        VersionInfo versionInfo = (VersionInfo)theEObject;
        T result = caseVersionInfo(versionInfo);
        if (result == null) result = caseType(versionInfo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.URL:
      {
        URL url = (URL)theEObject;
        T result = caseURL(url);
        if (result == null) result = caseType(url);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.COMMENT:
      {
        COMMENT comment = (COMMENT)theEObject;
        T result = caseCOMMENT(comment);
        if (result == null) result = caseType(comment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.DEPENDENCIES_COMP:
      {
        DependenciesComp dependenciesComp = (DependenciesComp)theEObject;
        T result = caseDependenciesComp(dependenciesComp);
        if (result == null) result = caseType(dependenciesComp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.FEATURE:
      {
        Feature feature = (Feature)theEObject;
        T result = caseFeature(feature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.IDF:
      {
        IDF idf = (IDF)theEObject;
        T result = caseIDF(idf);
        if (result == null) result = caseFeature(idf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.COMPONENT_NAME:
      {
        COMPONENT_NAME componenT_NAME = (COMPONENT_NAME)theEObject;
        T result = caseCOMPONENT_NAME(componenT_NAME);
        if (result == null) result = caseFeature(componenT_NAME);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.COMPONENT_NAME_FEATURE:
      {
        COMPONENT_NAME_FEATURE componenT_NAME_FEATURE = (COMPONENT_NAME_FEATURE)theEObject;
        T result = caseCOMPONENT_NAME_FEATURE(componenT_NAME_FEATURE);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.PUBLIC:
      {
        PUBLIC public_ = (PUBLIC)theEObject;
        T result = casePUBLIC(public_);
        if (result == null) result = caseCOMPONENT_NAME_FEATURE(public_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.OVERRIDE_PATH:
      {
        OVERRIDE_PATH overridE_PATH = (OVERRIDE_PATH)theEObject;
        T result = caseOVERRIDE_PATH(overridE_PATH);
        if (result == null) result = caseFeature(overridE_PATH);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IDFComponentDslPackage.RULES:
      {
        RULES rules = (RULES)theEObject;
        T result = caseRULES(rules);
        if (result == null) result = caseCOMPONENT_NAME_FEATURE(rules);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentModel(ComponentModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDescription(Description object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Version Info</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Version Info</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVersionInfo(VersionInfo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>URL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>URL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseURL(URL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>COMMENT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>COMMENT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCOMMENT(COMMENT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dependencies Comp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dependencies Comp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDependenciesComp(DependenciesComp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeature(Feature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IDF</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IDF</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIDF(IDF object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>COMPONENT NAME</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>COMPONENT NAME</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCOMPONENT_NAME(COMPONENT_NAME object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>COMPONENT NAME FEATURE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>COMPONENT NAME FEATURE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCOMPONENT_NAME_FEATURE(COMPONENT_NAME_FEATURE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PUBLIC</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PUBLIC</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePUBLIC(PUBLIC object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>OVERRIDE PATH</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>OVERRIDE PATH</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOVERRIDE_PATH(OVERRIDE_PATH object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RULES</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RULES</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRULES(RULES object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //IDFComponentDslSwitch
