/*
 * generated by Xtext 2.28.0
 */
package com.espressif.idf.componen.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IDFComponentDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ComponentModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.ComponentModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//ComponentModel:
		//    (elements+=Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(elements+=Type)*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDescriptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVersionInfoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDependenciesCompParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cURLParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCOMMENTParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//    Description | VersionInfo | DependenciesComp | URL | COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//Description | VersionInfo | DependenciesComp | URL | COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Description
		public RuleCall getDescriptionParserRuleCall_0() { return cDescriptionParserRuleCall_0; }
		
		//VersionInfo
		public RuleCall getVersionInfoParserRuleCall_1() { return cVersionInfoParserRuleCall_1; }
		
		//DependenciesComp
		public RuleCall getDependenciesCompParserRuleCall_2() { return cDependenciesCompParserRuleCall_2; }
		
		//URL
		public RuleCall getURLParserRuleCall_3() { return cURLParserRuleCall_3; }
		
		//COMMENT
		public RuleCall getCOMMENTParserRuleCall_4() { return cCOMMENTParserRuleCall_4; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Description:
		//    'description:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'description:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'description:'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class VersionInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.VersionInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VersionInfo:
		//    'version:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'version:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'version:'
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class URLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.URL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//URL:
		//    'url:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'url:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'url:'
		public Keyword getUrlKeyword_0() { return cUrlKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class COMMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.COMMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//COMMENT:
		//    '#' (name=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' (name=ID)*
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//(name=ID)*
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DependenciesCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.DependenciesComp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependenciesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		
		//DependenciesComp:
		//    'dependencies:' (features+=Feature)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'dependencies:' (features+=Feature)*
		public Group getGroup() { return cGroup; }
		
		//'dependencies:'
		public Keyword getDependenciesKeyword_0() { return cDependenciesKeyword_0; }
		
		//(features+=Feature)*
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_1_0() { return cFeaturesFeatureParserRuleCall_1_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDFParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOVERRIDE_PATHParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCOMPONENT_NAMEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Feature:
		//    IDF | OVERRIDE_PATH | COMPONENT_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//IDF | OVERRIDE_PATH | COMPONENT_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDF
		public RuleCall getIDFParserRuleCall_0() { return cIDFParserRuleCall_0; }
		
		//OVERRIDE_PATH
		public RuleCall getOVERRIDE_PATHParserRuleCall_1() { return cOVERRIDE_PATHParserRuleCall_1; }
		
		//COMPONENT_NAME
		public RuleCall getCOMPONENT_NAMEParserRuleCall_2() { return cCOMPONENT_NAMEParserRuleCall_2; }
	}
	public class IDFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.IDF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IDF:
		//    'idf:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'idf:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'idf:'
		public Keyword getIdfKeyword_0() { return cIdfKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class COMPONENT_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.COMPONENT_NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesCOMPONENT_NAME_FEATUREParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		
		//COMPONENT_NAME:
		//    name=ID ':' (features+=COMPONENT_NAME_FEATURE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (features+=COMPONENT_NAME_FEATURE)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(features+=COMPONENT_NAME_FEATURE)*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//COMPONENT_NAME_FEATURE
		public RuleCall getFeaturesCOMPONENT_NAME_FEATUREParserRuleCall_2_0() { return cFeaturesCOMPONENT_NAME_FEATUREParserRuleCall_2_0; }
	}
	public class COMPONENT_NAME_FEATUREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.COMPONENT_NAME_FEATURE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRULESParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPUBLICParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//COMPONENT_NAME_FEATURE:
		//    RULES | PUBLIC;
		@Override public ParserRule getRule() { return rule; }
		
		//RULES | PUBLIC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RULES
		public RuleCall getRULESParserRuleCall_0() { return cRULESParserRuleCall_0; }
		
		//PUBLIC
		public RuleCall getPUBLICParserRuleCall_1() { return cPUBLICParserRuleCall_1; }
	}
	public class PUBLICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.PUBLIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PUBLIC:
		//    'public:' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'public:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'public:'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class OVERRIDE_PATHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.OVERRIDE_PATH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOverride_pathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OVERRIDE_PATH:
		//    'override_path:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'override_path:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'override_path:'
		public Keyword getOverride_pathKeyword_0() { return cOverride_pathKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class RULESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.espressif.idf.componen.IDFComponentDsl.RULES");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRulesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RULES:
		//    'rules:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'rules:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'rules:'
		public Keyword getRulesKeyword_0() { return cRulesKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final ComponentModelElements pComponentModel;
	private final TypeElements pType;
	private final DescriptionElements pDescription;
	private final VersionInfoElements pVersionInfo;
	private final URLElements pURL;
	private final COMMENTElements pCOMMENT;
	private final DependenciesCompElements pDependenciesComp;
	private final FeatureElements pFeature;
	private final IDFElements pIDF;
	private final COMPONENT_NAMEElements pCOMPONENT_NAME;
	private final COMPONENT_NAME_FEATUREElements pCOMPONENT_NAME_FEATURE;
	private final PUBLICElements pPUBLIC;
	private final OVERRIDE_PATHElements pOVERRIDE_PATH;
	private final RULESElements pRULES;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IDFComponentDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pComponentModel = new ComponentModelElements();
		this.pType = new TypeElements();
		this.pDescription = new DescriptionElements();
		this.pVersionInfo = new VersionInfoElements();
		this.pURL = new URLElements();
		this.pCOMMENT = new COMMENTElements();
		this.pDependenciesComp = new DependenciesCompElements();
		this.pFeature = new FeatureElements();
		this.pIDF = new IDFElements();
		this.pCOMPONENT_NAME = new COMPONENT_NAMEElements();
		this.pCOMPONENT_NAME_FEATURE = new COMPONENT_NAME_FEATUREElements();
		this.pPUBLIC = new PUBLICElements();
		this.pOVERRIDE_PATH = new OVERRIDE_PATHElements();
		this.pRULES = new RULESElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.espressif.idf.componen.IDFComponentDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ComponentModel:
	//    (elements+=Type)*;
	public ComponentModelElements getComponentModelAccess() {
		return pComponentModel;
	}
	
	public ParserRule getComponentModelRule() {
		return getComponentModelAccess().getRule();
	}
	
	//Type:
	//    Description | VersionInfo | DependenciesComp | URL | COMMENT;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Description:
	//    'description:' name=STRING;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//VersionInfo:
	//    'version:' name=STRING;
	public VersionInfoElements getVersionInfoAccess() {
		return pVersionInfo;
	}
	
	public ParserRule getVersionInfoRule() {
		return getVersionInfoAccess().getRule();
	}
	
	//URL:
	//    'url:' name=STRING;
	public URLElements getURLAccess() {
		return pURL;
	}
	
	public ParserRule getURLRule() {
		return getURLAccess().getRule();
	}
	
	//COMMENT:
	//    '#' (name=ID)*;
	public COMMENTElements getCOMMENTAccess() {
		return pCOMMENT;
	}
	
	public ParserRule getCOMMENTRule() {
		return getCOMMENTAccess().getRule();
	}
	
	//DependenciesComp:
	//    'dependencies:' (features+=Feature)*;
	public DependenciesCompElements getDependenciesCompAccess() {
		return pDependenciesComp;
	}
	
	public ParserRule getDependenciesCompRule() {
		return getDependenciesCompAccess().getRule();
	}
	
	//Feature:
	//    IDF | OVERRIDE_PATH | COMPONENT_NAME;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//IDF:
	//    'idf:' name=STRING;
	public IDFElements getIDFAccess() {
		return pIDF;
	}
	
	public ParserRule getIDFRule() {
		return getIDFAccess().getRule();
	}
	
	//COMPONENT_NAME:
	//    name=ID ':' (features+=COMPONENT_NAME_FEATURE)*;
	public COMPONENT_NAMEElements getCOMPONENT_NAMEAccess() {
		return pCOMPONENT_NAME;
	}
	
	public ParserRule getCOMPONENT_NAMERule() {
		return getCOMPONENT_NAMEAccess().getRule();
	}
	
	//COMPONENT_NAME_FEATURE:
	//    RULES | PUBLIC;
	public COMPONENT_NAME_FEATUREElements getCOMPONENT_NAME_FEATUREAccess() {
		return pCOMPONENT_NAME_FEATURE;
	}
	
	public ParserRule getCOMPONENT_NAME_FEATURERule() {
		return getCOMPONENT_NAME_FEATUREAccess().getRule();
	}
	
	//PUBLIC:
	//    'public:' name=ID;
	public PUBLICElements getPUBLICAccess() {
		return pPUBLIC;
	}
	
	public ParserRule getPUBLICRule() {
		return getPUBLICAccess().getRule();
	}
	
	//OVERRIDE_PATH:
	//    'override_path:' name=STRING;
	public OVERRIDE_PATHElements getOVERRIDE_PATHAccess() {
		return pOVERRIDE_PATH;
	}
	
	public ParserRule getOVERRIDE_PATHRule() {
		return getOVERRIDE_PATHAccess().getRule();
	}
	
	//RULES:
	//    'rules:' name=STRING;
	public RULESElements getRULESAccess() {
		return pRULES;
	}
	
	public ParserRule getRULESRule() {
		return getRULESAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
