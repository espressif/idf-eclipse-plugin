/*
 * generated by Xtext 2.28.0
 */
package com.espressif.idf.componen.ide.contentassist.antlr;

import com.espressif.idf.componen.ide.contentassist.antlr.internal.InternalIDFComponentDslParser;
import com.espressif.idf.componen.services.IDFComponentDslGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class IDFComponentDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(IDFComponentDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, IDFComponentDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
			builder.put(grammarAccess.getCOMPONENT_NAME_FEATUREAccess().getAlternatives(), "rule__COMPONENT_NAME_FEATURE__Alternatives");
			builder.put(grammarAccess.getDescriptionAccess().getGroup(), "rule__Description__Group__0");
			builder.put(grammarAccess.getVersionInfoAccess().getGroup(), "rule__VersionInfo__Group__0");
			builder.put(grammarAccess.getURLAccess().getGroup(), "rule__URL__Group__0");
			builder.put(grammarAccess.getCOMMENTAccess().getGroup(), "rule__COMMENT__Group__0");
			builder.put(grammarAccess.getDependenciesCompAccess().getGroup(), "rule__DependenciesComp__Group__0");
			builder.put(grammarAccess.getIDFAccess().getGroup(), "rule__IDF__Group__0");
			builder.put(grammarAccess.getCOMPONENT_NAMEAccess().getGroup(), "rule__COMPONENT_NAME__Group__0");
			builder.put(grammarAccess.getPUBLICAccess().getGroup(), "rule__PUBLIC__Group__0");
			builder.put(grammarAccess.getOVERRIDE_PATHAccess().getGroup(), "rule__OVERRIDE_PATH__Group__0");
			builder.put(grammarAccess.getRULESAccess().getGroup(), "rule__RULES__Group__0");
			builder.put(grammarAccess.getComponentModelAccess().getElementsAssignment(), "rule__ComponentModel__ElementsAssignment");
			builder.put(grammarAccess.getDescriptionAccess().getNameAssignment_1(), "rule__Description__NameAssignment_1");
			builder.put(grammarAccess.getVersionInfoAccess().getNameAssignment_1(), "rule__VersionInfo__NameAssignment_1");
			builder.put(grammarAccess.getURLAccess().getNameAssignment_1(), "rule__URL__NameAssignment_1");
			builder.put(grammarAccess.getCOMMENTAccess().getNameAssignment_1(), "rule__COMMENT__NameAssignment_1");
			builder.put(grammarAccess.getDependenciesCompAccess().getFeaturesAssignment_1(), "rule__DependenciesComp__FeaturesAssignment_1");
			builder.put(grammarAccess.getIDFAccess().getNameAssignment_1(), "rule__IDF__NameAssignment_1");
			builder.put(grammarAccess.getCOMPONENT_NAMEAccess().getNameAssignment_0(), "rule__COMPONENT_NAME__NameAssignment_0");
			builder.put(grammarAccess.getCOMPONENT_NAMEAccess().getFeaturesAssignment_2(), "rule__COMPONENT_NAME__FeaturesAssignment_2");
			builder.put(grammarAccess.getPUBLICAccess().getNameAssignment_1(), "rule__PUBLIC__NameAssignment_1");
			builder.put(grammarAccess.getOVERRIDE_PATHAccess().getNameAssignment_1(), "rule__OVERRIDE_PATH__NameAssignment_1");
			builder.put(grammarAccess.getRULESAccess().getNameAssignment_1(), "rule__RULES__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private IDFComponentDslGrammarAccess grammarAccess;

	@Override
	protected InternalIDFComponentDslParser createParser() {
		InternalIDFComponentDslParser result = new InternalIDFComponentDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IDFComponentDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IDFComponentDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
