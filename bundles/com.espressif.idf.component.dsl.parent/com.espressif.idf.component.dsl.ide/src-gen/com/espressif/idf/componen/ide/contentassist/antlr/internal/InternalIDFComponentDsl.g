/*
 * generated by Xtext 2.28.0
 */
grammar InternalIDFComponentDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.espressif.idf.componen.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.espressif.idf.componen.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.espressif.idf.componen.services.IDFComponentDslGrammarAccess;

}
@parser::members {
	private IDFComponentDslGrammarAccess grammarAccess;

	public void setGrammarAccess(IDFComponentDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleComponentModel
entryRuleComponentModel
:
{ before(grammarAccess.getComponentModelRule()); }
	 ruleComponentModel
{ after(grammarAccess.getComponentModelRule()); } 
	 EOF 
;

// Rule ComponentModel
ruleComponentModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentModelAccess().getElementsAssignment()); }
		(rule__ComponentModel__ElementsAssignment)*
		{ after(grammarAccess.getComponentModelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDescription
entryRuleDescription
:
{ before(grammarAccess.getDescriptionRule()); }
	 ruleDescription
{ after(grammarAccess.getDescriptionRule()); } 
	 EOF 
;

// Rule Description
ruleDescription 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDescriptionAccess().getGroup()); }
		(rule__Description__Group__0)
		{ after(grammarAccess.getDescriptionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVersionInfo
entryRuleVersionInfo
:
{ before(grammarAccess.getVersionInfoRule()); }
	 ruleVersionInfo
{ after(grammarAccess.getVersionInfoRule()); } 
	 EOF 
;

// Rule VersionInfo
ruleVersionInfo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVersionInfoAccess().getGroup()); }
		(rule__VersionInfo__Group__0)
		{ after(grammarAccess.getVersionInfoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleURL
entryRuleURL
:
{ before(grammarAccess.getURLRule()); }
	 ruleURL
{ after(grammarAccess.getURLRule()); } 
	 EOF 
;

// Rule URL
ruleURL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getURLAccess().getGroup()); }
		(rule__URL__Group__0)
		{ after(grammarAccess.getURLAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOMMENT
entryRuleCOMMENT
:
{ before(grammarAccess.getCOMMENTRule()); }
	 ruleCOMMENT
{ after(grammarAccess.getCOMMENTRule()); } 
	 EOF 
;

// Rule COMMENT
ruleCOMMENT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOMMENTAccess().getGroup()); }
		(rule__COMMENT__Group__0)
		{ after(grammarAccess.getCOMMENTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDependenciesComp
entryRuleDependenciesComp
:
{ before(grammarAccess.getDependenciesCompRule()); }
	 ruleDependenciesComp
{ after(grammarAccess.getDependenciesCompRule()); } 
	 EOF 
;

// Rule DependenciesComp
ruleDependenciesComp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDependenciesCompAccess().getGroup()); }
		(rule__DependenciesComp__Group__0)
		{ after(grammarAccess.getDependenciesCompAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getAlternatives()); }
		(rule__Feature__Alternatives)
		{ after(grammarAccess.getFeatureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIDF
entryRuleIDF
:
{ before(grammarAccess.getIDFRule()); }
	 ruleIDF
{ after(grammarAccess.getIDFRule()); } 
	 EOF 
;

// Rule IDF
ruleIDF 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIDFAccess().getGroup()); }
		(rule__IDF__Group__0)
		{ after(grammarAccess.getIDFAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOMPONENT_NAME
entryRuleCOMPONENT_NAME
:
{ before(grammarAccess.getCOMPONENT_NAMERule()); }
	 ruleCOMPONENT_NAME
{ after(grammarAccess.getCOMPONENT_NAMERule()); } 
	 EOF 
;

// Rule COMPONENT_NAME
ruleCOMPONENT_NAME 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOMPONENT_NAMEAccess().getGroup()); }
		(rule__COMPONENT_NAME__Group__0)
		{ after(grammarAccess.getCOMPONENT_NAMEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOMPONENT_NAME_FEATURE
entryRuleCOMPONENT_NAME_FEATURE
:
{ before(grammarAccess.getCOMPONENT_NAME_FEATURERule()); }
	 ruleCOMPONENT_NAME_FEATURE
{ after(grammarAccess.getCOMPONENT_NAME_FEATURERule()); } 
	 EOF 
;

// Rule COMPONENT_NAME_FEATURE
ruleCOMPONENT_NAME_FEATURE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOMPONENT_NAME_FEATUREAccess().getAlternatives()); }
		(rule__COMPONENT_NAME_FEATURE__Alternatives)
		{ after(grammarAccess.getCOMPONENT_NAME_FEATUREAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePUBLIC
entryRulePUBLIC
:
{ before(grammarAccess.getPUBLICRule()); }
	 rulePUBLIC
{ after(grammarAccess.getPUBLICRule()); } 
	 EOF 
;

// Rule PUBLIC
rulePUBLIC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPUBLICAccess().getGroup()); }
		(rule__PUBLIC__Group__0)
		{ after(grammarAccess.getPUBLICAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOVERRIDE_PATH
entryRuleOVERRIDE_PATH
:
{ before(grammarAccess.getOVERRIDE_PATHRule()); }
	 ruleOVERRIDE_PATH
{ after(grammarAccess.getOVERRIDE_PATHRule()); } 
	 EOF 
;

// Rule OVERRIDE_PATH
ruleOVERRIDE_PATH 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOVERRIDE_PATHAccess().getGroup()); }
		(rule__OVERRIDE_PATH__Group__0)
		{ after(grammarAccess.getOVERRIDE_PATHAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRULES
entryRuleRULES
:
{ before(grammarAccess.getRULESRule()); }
	 ruleRULES
{ after(grammarAccess.getRULESRule()); } 
	 EOF 
;

// Rule RULES
ruleRULES 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRULESAccess().getGroup()); }
		(rule__RULES__Group__0)
		{ after(grammarAccess.getRULESAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getDescriptionParserRuleCall_0()); }
		ruleDescription
		{ after(grammarAccess.getTypeAccess().getDescriptionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getVersionInfoParserRuleCall_1()); }
		ruleVersionInfo
		{ after(grammarAccess.getTypeAccess().getVersionInfoParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getDependenciesCompParserRuleCall_2()); }
		ruleDependenciesComp
		{ after(grammarAccess.getTypeAccess().getDependenciesCompParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getURLParserRuleCall_3()); }
		ruleURL
		{ after(grammarAccess.getTypeAccess().getURLParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getCOMMENTParserRuleCall_4()); }
		ruleCOMMENT
		{ after(grammarAccess.getTypeAccess().getCOMMENTParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getIDFParserRuleCall_0()); }
		ruleIDF
		{ after(grammarAccess.getFeatureAccess().getIDFParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureAccess().getOVERRIDE_PATHParserRuleCall_1()); }
		ruleOVERRIDE_PATH
		{ after(grammarAccess.getFeatureAccess().getOVERRIDE_PATHParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureAccess().getCOMPONENT_NAMEParserRuleCall_2()); }
		ruleCOMPONENT_NAME
		{ after(grammarAccess.getFeatureAccess().getCOMPONENT_NAMEParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPONENT_NAME_FEATURE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMPONENT_NAME_FEATUREAccess().getRULESParserRuleCall_0()); }
		ruleRULES
		{ after(grammarAccess.getCOMPONENT_NAME_FEATUREAccess().getRULESParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCOMPONENT_NAME_FEATUREAccess().getPUBLICParserRuleCall_1()); }
		rulePUBLIC
		{ after(grammarAccess.getCOMPONENT_NAME_FEATUREAccess().getPUBLICParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Description__Group__0__Impl
	rule__Description__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescriptionAccess().getDescriptionKeyword_0()); }
	'description:'
	{ after(grammarAccess.getDescriptionAccess().getDescriptionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Description__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescriptionAccess().getNameAssignment_1()); }
	(rule__Description__NameAssignment_1)
	{ after(grammarAccess.getDescriptionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VersionInfo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VersionInfo__Group__0__Impl
	rule__VersionInfo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionInfo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionInfoAccess().getVersionKeyword_0()); }
	'version:'
	{ after(grammarAccess.getVersionInfoAccess().getVersionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionInfo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VersionInfo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionInfo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionInfoAccess().getNameAssignment_1()); }
	(rule__VersionInfo__NameAssignment_1)
	{ after(grammarAccess.getVersionInfoAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__URL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__URL__Group__0__Impl
	rule__URL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__URL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getURLAccess().getUrlKeyword_0()); }
	'url:'
	{ after(grammarAccess.getURLAccess().getUrlKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__URL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__URL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__URL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getURLAccess().getNameAssignment_1()); }
	(rule__URL__NameAssignment_1)
	{ after(grammarAccess.getURLAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__COMMENT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMMENT__Group__0__Impl
	rule__COMMENT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMMENTAccess().getNumberSignKeyword_0()); }
	'#'
	{ after(grammarAccess.getCOMMENTAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMMENT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMMENTAccess().getNameAssignment_1()); }
	(rule__COMMENT__NameAssignment_1)*
	{ after(grammarAccess.getCOMMENTAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DependenciesComp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DependenciesComp__Group__0__Impl
	rule__DependenciesComp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DependenciesComp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependenciesCompAccess().getDependenciesKeyword_0()); }
	'dependencies:'
	{ after(grammarAccess.getDependenciesCompAccess().getDependenciesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DependenciesComp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DependenciesComp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DependenciesComp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependenciesCompAccess().getFeaturesAssignment_1()); }
	(rule__DependenciesComp__FeaturesAssignment_1)*
	{ after(grammarAccess.getDependenciesCompAccess().getFeaturesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IDF__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IDF__Group__0__Impl
	rule__IDF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IDF__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIDFAccess().getIdfKeyword_0()); }
	'idf:'
	{ after(grammarAccess.getIDFAccess().getIdfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IDF__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IDF__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IDF__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIDFAccess().getNameAssignment_1()); }
	(rule__IDF__NameAssignment_1)
	{ after(grammarAccess.getIDFAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__COMPONENT_NAME__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPONENT_NAME__Group__0__Impl
	rule__COMPONENT_NAME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPONENT_NAME__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPONENT_NAMEAccess().getNameAssignment_0()); }
	(rule__COMPONENT_NAME__NameAssignment_0)
	{ after(grammarAccess.getCOMPONENT_NAMEAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPONENT_NAME__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPONENT_NAME__Group__1__Impl
	rule__COMPONENT_NAME__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPONENT_NAME__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPONENT_NAMEAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCOMPONENT_NAMEAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPONENT_NAME__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMPONENT_NAME__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPONENT_NAME__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMPONENT_NAMEAccess().getFeaturesAssignment_2()); }
	(rule__COMPONENT_NAME__FeaturesAssignment_2)*
	{ after(grammarAccess.getCOMPONENT_NAMEAccess().getFeaturesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PUBLIC__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PUBLIC__Group__0__Impl
	rule__PUBLIC__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PUBLIC__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPUBLICAccess().getPublicKeyword_0()); }
	'public:'
	{ after(grammarAccess.getPUBLICAccess().getPublicKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PUBLIC__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PUBLIC__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PUBLIC__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPUBLICAccess().getNameAssignment_1()); }
	(rule__PUBLIC__NameAssignment_1)
	{ after(grammarAccess.getPUBLICAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OVERRIDE_PATH__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OVERRIDE_PATH__Group__0__Impl
	rule__OVERRIDE_PATH__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OVERRIDE_PATH__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOVERRIDE_PATHAccess().getOverride_pathKeyword_0()); }
	'override_path:'
	{ after(grammarAccess.getOVERRIDE_PATHAccess().getOverride_pathKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OVERRIDE_PATH__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OVERRIDE_PATH__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OVERRIDE_PATH__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOVERRIDE_PATHAccess().getNameAssignment_1()); }
	(rule__OVERRIDE_PATH__NameAssignment_1)
	{ after(grammarAccess.getOVERRIDE_PATHAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RULES__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RULES__Group__0__Impl
	rule__RULES__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RULES__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRULESAccess().getRulesKeyword_0()); }
	'rules:'
	{ after(grammarAccess.getRULESAccess().getRulesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RULES__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RULES__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RULES__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRULESAccess().getNameAssignment_1()); }
	(rule__RULES__NameAssignment_1)
	{ after(grammarAccess.getRULESAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentModel__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentModelAccess().getElementsTypeParserRuleCall_0()); }
		ruleType
		{ after(grammarAccess.getComponentModelAccess().getElementsTypeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDescriptionAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getDescriptionAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionInfo__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVersionInfoAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getVersionInfoAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__URL__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getURLAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getURLAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMMENTAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCOMMENTAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DependenciesComp__FeaturesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependenciesCompAccess().getFeaturesFeatureParserRuleCall_1_0()); }
		ruleFeature
		{ after(grammarAccess.getDependenciesCompAccess().getFeaturesFeatureParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IDF__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIDFAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getIDFAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPONENT_NAME__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMPONENT_NAMEAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getCOMPONENT_NAMEAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMPONENT_NAME__FeaturesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMPONENT_NAMEAccess().getFeaturesCOMPONENT_NAME_FEATUREParserRuleCall_2_0()); }
		ruleCOMPONENT_NAME_FEATURE
		{ after(grammarAccess.getCOMPONENT_NAMEAccess().getFeaturesCOMPONENT_NAME_FEATUREParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PUBLIC__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPUBLICAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPUBLICAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OVERRIDE_PATH__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOVERRIDE_PATHAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getOVERRIDE_PATHAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RULES__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRULESAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getRULESAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
