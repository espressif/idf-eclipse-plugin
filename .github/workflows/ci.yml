# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_linux:

    runs-on: [self-hosted, eclipse, BrnoUBU0004]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Get latest EIM-CLI release
      id: latest_eim_release
      run: |
        # Fetch the latest release info
        latest_release=$(curl -s https://api.github.com/repos/espressif/idf-im-cli/releases/latest)
        # Extract the tag name
        tag_name=$(echo "$latest_release" | jq -r '.tag_name')
        echo "tag_name=$tag_name" >> $GITHUB_ENV
        # Detect OS and architecture
        case "$(uname -s)" in
          Linux*)   os=linux;;
          Darwin*)  os=macos;;
          CYGWIN*|MINGW*) os=windows;;
          *)        echo "Unsupported OS"; exit 1;;
        esac

        case "$(uname -m)" in
          x86_64)   arch=x64;;
          arm64|aarch64) arch=arm64;;
          *)        echo "Unsupported architecture"; exit 1;;
        esac

        # Find the correct asset URL
        asset_url=$(echo "$latest_release" | jq -r --arg os "$os" --arg arch "$arch" \
        '.assets[] | select(.name | contains($os) and contains($arch)) | .browser_download_url') 
        if [ -z "$asset_url" ]; then
          echo "No matching asset found for OS: $os and Architecture: $arch"; exit 1;
        fi

        echo "asset_url=$asset_url" >> $GITHUB_ENV

    - name: Download the latest EIM-CLI
      run: |
         # Use the extracted asset URL to download the file
         curl -L -o eim-cli.zip "$asset_url"
         # Extract the downloaded archive (if it's a tar.gz file)
         unzip eim-cli.zip -d eim-cli

    - name: Setup the latest EIM-CLI
      run: |
         # Add commands to install or set up the downloaded release
         echo "Installing release from tag: ${{ env.tag_name }}"
         cd eim-cli
         chmod +x eim
         sudo mv eim /usr/local/bin

    - name: Install ESP-IDF via eim		
      run: |
         eim -p ../dependencies/idf-tools --idf-versions v5.3 --tool-download-folder-name dist --tool-install-folder-name tools --target all --non-interactive true -m https://github.com --idf-mirror https://github.com --recurse-submodules tue --verbose

    - name: Set up Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: 3.9.6
   
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: export NO_AT_BRIDGE=1 && mvn clean verify -Djarsigner.skip=true spotbugs:spotbugs -DskipTests=false -DtestWorkspace=/opt/actions-runner/_work/workspace
    - uses: jwgmeligmeyling/spotbugs-github-action@master
      with:
        path: '**/spotbugsXml.xml'

    - name: Publish Test Reports
      if: ${{ always() }}
      uses: phoenix-actions/test-reporting@v12
      with:
        name: Linux Test Reports
        path:
          tests/*/*/*/TEST-*.xml
        reporter: java-junit
  
  build_macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean verify -Djarsigner.skip=true

    - name: Extract version number
      id: extract_version
      run: |
        # List all files and extract the version number from the file names
        version=$(ls releng/com.espressif.idf.product/target/products/Espressif-IDE-*.tar.gz | sed -E 's/.*Espressif-IDE-([0-9]+\.[0-9]+\.[0-9]+)-.*/\1/' | head -n 1)
        echo "VERSION=${version}" >> $GITHUB_ENV
  
    - name: Upload build artifacts
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: com.espressif.idf.update-${{ env.VERSION }}
        path: releng/com.espressif.idf.update/target/repository

    - name: Upload Windows x86_64 artifact
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: Espressif-IDE-${{ env.VERSION }}-win32
        path: releng/com.espressif.idf.product/target/products/Espressif-IDE-${{ env.VERSION }}-win32.win32.x86_64.zip
  
    - name: Upload Linux x86_64 artifact
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: Espressif-IDE-${{ env.VERSION }}-linux.gtk.x86_64
        path: releng/com.espressif.idf.product/target/products/Espressif-IDE-${{ env.VERSION }}-linux.gtk.x86_64.tar.gz
  
    - name: Upload Linux ARM64 artifact
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: Espressif-IDE-${{ env.VERSION }}-linux.gtk.aarch64
        path: releng/com.espressif.idf.product/target/products/Espressif-IDE-${{ env.VERSION }}-linux.gtk.aarch64.tar.gz
  
    - name: Codesign Espressif-IDE
      env: 
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      run: |
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        /usr/bin/security create-keychain -p espressif build.keychain
        /usr/bin/security default-keychain -s build.keychain
        /usr/bin/security unlock-keychain -p espressif build.keychain
        /usr/bin/security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
        /usr/bin/security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k espressif build.keychain
        
        echo "codesigning espressif-ide-macosx.cocoa.x86_64"
        /usr/bin/codesign --entitlements $PWD/releng/com.espressif.idf.product/entitlements/espressif-ide.entitlement --options runtime --force -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" $PWD/releng/com.espressif.idf.product/target/products/com.espressif.idf.product/macosx/cocoa/x86_64/Espressif-IDE.app -v
        /usr/bin/codesign -v -vvv --deep $PWD/releng/com.espressif.idf.product/target/products/com.espressif.idf.product/macosx/cocoa/x86_64/Espressif-IDE.app

        echo "codesigning espressif-ide-macosx.cocoa.aarch64"
        /usr/bin/codesign --entitlements $PWD/releng/com.espressif.idf.product/entitlements/espressif-ide.entitlement --options runtime --force -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" $PWD/releng/com.espressif.idf.product/target/products/com.espressif.idf.product/macosx/cocoa/aarch64/Espressif-IDE.app -v
        /usr/bin/codesign -v -vvv --deep $PWD/releng/com.espressif.idf.product/target/products/com.espressif.idf.product/macosx/cocoa/aarch64/Espressif-IDE.app
        
        echo "Creating dmg for espressif-ide-macosx.cocoa.x86_64"
        $PWD/releng/ide-dmg-builder/ide-dmg-builder.sh
        /usr/bin/codesign --entitlements $PWD/releng/com.espressif.idf.product/entitlements/espressif-ide.entitlement --options runtime --force -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-x86_64.dmg -v
        /usr/bin/codesign -v -vvv --deep $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-x86_64.dmg
      
        echo "Creating dmg for espressif-ide-macosx.cocoa.aarch64"
        $PWD/releng/ide-dmg-builder/ide-dmg-builder-aarch64.sh
        /usr/bin/codesign --options runtime --force -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-aarch64.dmg -v
        /usr/bin/codesign -v -vvv --deep $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-aarch64.dmg
      
    - name: Upload espressif-ide-macosx.cocoa.x86_64 dmg
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: Espressif-IDE-${{ env.VERSION }}-macosx.cocoa.x86_64
        path: releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-x86_64.dmg

    - name: Upload espressif-ide-macosx.cocoa.aarch64 dmg
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: Espressif-IDE-${{ env.VERSION }}-macosx.cocoa.aarch64
        path: releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-aarch64.dmg
