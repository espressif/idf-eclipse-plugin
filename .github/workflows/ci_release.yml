name: Espressif-IDE Cross-platform Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+\\.[0-9]+\\.[0-9]+-beta"

env:
  ARCHIVE_PREFIX: com.espressif.idf.update-
  ARCHIVE_SUFFIX: -SNAPSHOT.zip

jobs:
  macos-build:
    runs-on: macos-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF##*/v}" >> $GITHUB_OUTPUT

      - name: Decode keystore and build with Maven
        env:
          JARSIGNER_KEYSTORE_B64: ${{ secrets.JARSIGNER_REL_KEYSTORE_B64 }}
          JARSIGNER_STOREPASS: ${{ secrets.JARSIGNER_REL_STOREPASS }}
          JARSIGNER_ALIAS: ${{ secrets.JARSIGNER_REL_ALIAS }}
        run: |
          KEYSTORE_FILE="${PWD}/{{secrets.JARSIGNER_KEYSTORE}}"
          echo "${KEYSTORE_FILE}"
          printf "%s" "${JARSIGNER_KEYSTORE_B64}" | base64 -d > "${KEYSTORE_FILE}"
          mvn -e -X clean install -Djarsigner.keystore="${KEYSTORE_FILE}" -Djarsigner.alias="${JARSIGNER_ALIAS}" -Djarsigner.storepass="${JARSIGNER_STOREPASS}" -DskipTests=true
          rm -v "${KEYSTORE_FILE}"

      - name: Codesign Espressif-IDE
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
            echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
            /usr/bin/security create-keychain -p espressif build.keychain
            /usr/bin/security default-keychain -s build.keychain
            /usr/bin/security unlock-keychain -p espressif build.keychain
            /usr/bin/security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
            /usr/bin/security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k espressif build.keychain
            
            echo "codesigning espressif-ide-macosx.cocoa.x86_64"
            /usr/bin/codesign --entitlements $PWD/releng/com.espressif.idf.product/entitlements/espressif-ide.entitlement --options runtime --force -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" $PWD/releng/com.espressif.idf.product/target/products/com.espressif.idf.product/macosx/cocoa/x86_64/Espressif-IDE.app -v
            /usr/bin/codesign -v -vvv --deep $PWD/releng/com.espressif.idf.product/target/products/com.espressif.idf.product/macosx/cocoa/x86_64/Espressif-IDE.app
            
            echo "codesigning espressif-ide-macosx.cocoa.aarch64"
            /usr/bin/codesign --entitlements $PWD/releng/com.espressif.idf.product/entitlements/espressif-ide.entitlement --options runtime --force -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" $PWD/releng/com.espressif.idf.product/target/products/com.espressif.idf.product/macosx/cocoa/aarch64/Espressif-IDE.app -v
            /usr/bin/codesign -v -vvv --deep $PWD/releng/com.espressif.idf.product/target/products/com.espressif.idf.product/macosx/cocoa/aarch64/Espressif-IDE.app
            
            echo "Creating dmg for espressif-ide-macosx.cocoa.x86_64"
            $PWD/releng/ide-dmg-builder/ide-dmg-builder.sh
            /usr/bin/codesign --entitlements $PWD/releng/com.espressif.idf.product/entitlements/espressif-ide.entitlement --options runtime --force -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-x86_64.dmg -v
            /usr/bin/codesign -v -vvv --deep $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-x86_64.dmg
          
            echo "Creating dmg for espressif-ide-macosx.cocoa.aarch64"
            $PWD/releng/ide-dmg-builder/ide-dmg-builder-aarch64.sh
            /usr/bin/codesign --options runtime --force -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-aarch64.dmg -v
            /usr/bin/codesign -v -vvv --deep $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-aarch64.dmg

      - name: Notarization of Espressif-IDE dmg files
        env: 
          NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
          NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
          NOTARIZATION_TEAM_ID: ${{ secrets.NOTARIZATION_TEAM_ID }}
        run: |
              echo "Create notary keychain"
                /usr/bin/security create-keychain -p espressif notary.keychain
                /usr/bin/security default-keychain -s notary.keychain
                /usr/bin/security unlock-keychain -p espressif notary.keychain
        
                echo "Create keychain profile"
                xcrun notarytool store-credentials "ide-notarytool-profile" --apple-id $NOTARIZATION_USERNAME --team-id $NOTARIZATION_TEAM_ID --password $NOTARIZATION_PASSWORD
                xcrun notarytool submit $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-x86_64.dmg --keychain-profile "ide-notarytool-profile" --wait
                
                echo "Attach staple for x86_64.dmg"
                xcrun stapler staple $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-x86_64.dmg
                
                echo "Unlock the notary keychain"
                /usr/bin/security unlock-keychain -p espressif notary.keychain
        
                xcrun notarytool submit $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-aarch64.dmg --keychain-profile "ide-notarytool-profile" --wait
                echo "Attach staple for aarch64.dmg"
                xcrun stapler staple $PWD/releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-aarch64.dmg
        
      - name: Upload Espressif-IDE-macosx-cocoa-x86_64.dmg
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: espressif-ide-macosx-cocoa-x86_64
          path: releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-x86_64.dmg
      
      - name: Upload Espressif-IDE-macosx-cocoa-aarch64.dmg
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
           name: espressif-ide-macosx.cocoa.aarch64
           path: releng/ide-dmg-builder/Espressif-IDE-macosx-cocoa-aarch64.dmg
      
      - name: Upload build artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: com.espressif.idf.update
          path: releng/com.espressif.idf.update/target/repository
              
      - name: Upload windows rcp
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: espressif-ide-win32
          path: releng/com.espressif.idf.product/target/products/Espressif-IDE-*-win32.win32.x86_64.zip
      
      - name: Upload linux rcp
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: espressif-ide-linux
          path: releng/com.espressif.idf.product/target/products/Espressif-IDE-*-linux.gtk.x86_64.tar.gz


  windows-sign:
    runs-on: windows-latest
    needs: macos-build
    env:
      JKS_B64: ${{ secrets.JARSIGNER_REL_KEYSTORE_B64 }}
      JKS_PASS: ${{ secrets.JARSIGNER_REL_STOREPASS }}
      ALIAS: ${{ secrets.JARSIGNER_REL_ALIAS }}
      PFX_PASS: ${{ secrets.JARSIGNER_REL_STOREPASS }}
    steps:
      - uses: actions/checkout@v3

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: espressif-ide-win32
          path: artifacts


      - name: Verify the downloaded file
        shell: pwsh
        run: |
           ls .\artifacts\*

      - name: Extract Windows ZIP
        shell: pwsh
        run: |
          Expand-Archive -Path artifacts\*.zip -DestinationPath extracted -Force
          ls .\artifacts\*

      - name: Decode base64-encoded JKS
        run: |
          # Restore JKS from secret
          [IO.File]::WriteAllBytes("signing.jks",[Convert]::FromBase64String($env:JKS_B64))
          if (-not (Test-Path "$PWD\signing.jks")) { throw "signing.jks not created" }

      - name: Verify JKS contains a PrivateKeyEntry
        shell: pwsh
        run: |
         if (-not $env:ALIAS) { throw "ALIAS secret is empty. It must point to the PrivateKeyEntry alias." }
         $out = & "${env:JAVA_HOME}\bin\keytool.exe" -list -v -keystore signing.jks -storepass $env:JKS_PASS
         # Show the entry for the alias (log masking will hide secrets)
         Write-Host $out | Select-String -Pattern "Alias name: $env:ALIAS" -Context 0,8
         # Hard-check the entry type for the alias
         $aliasBlock = ($out -split "Alias name:") | Where-Object { $_ -match "^\s*$($env:ALIAS)\b" }
         if (-not $aliasBlock) { throw "Alias '$env:ALIAS' not found in signing.jks" }
         if ($aliasBlock -notmatch "Entry type:\s*PrivateKeyEntry") {
           throw "Alias '$env:ALIAS' is not a PrivateKeyEntry (likely a trustedCertEntry). cannot export a private key from this JKS."
         }

      - name: Convert JKS to PFX
        shell: pwsh
        run: |
         & "${env:JAVA_HOME}\bin\keytool.exe" -importkeystore `
          -srckeystore "$PWD\signing.jks" `
          -srcstorepass $env:JKS_PASS `
          -srcalias $env:ALIAS `
          -srckeypass $env:JKS_PASS `  
          -destkeystore "$PWD\cert.pfx" `
          -deststoretype PKCS12 `
          -deststorepass $env:PFX_PASS `
          -destkeypass $env:PFX_PASS
         if (-not (Test-Path "$PWD\cert.pfx")) { throw "cert.pfx not created" }

      - name: Prove PFX has a private key (fail fast)
        shell: pwsh
        run: |
         $dump = certutil -p $env:PFX_PASS -dump "$PWD\cert.pfx"
         if ($dump -notmatch 'Private key is present:\s*Yes') {
           Write-Host $dump
           throw "Exported PFX lacks a private key. Check alias/passwords; your JKS may be a truststore."
         }

      - name: Inspect the PFX file
        shell: pwsh
        run: |
          certutil -p $env:PFX_PASS -dump cert.pfx


      - name: Sign Windows Executable
        shell: pwsh
        run: |
         $exe = Get-ChildItem -File -Recurse "$PWD\extracted\Espressif-IDE\espressif-ide.exe" | Select-Object -First 1
         if (-not $exe) { throw "espressif-ide.exe not found under extracted\Espressif-IDE" }

         $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits" -Recurse -Filter signtool.exe |
                    Sort-Object FullName | Select-Object -First 1
         if (-not $signtool) { throw "signtool.exe not found in Windows Kits" }

         & $signtool.FullName sign `
          /debug /v `
          /f "$PWD\cert.pfx" `
          /p $env:PFX_PASS `
          /tr http://timestamp.digicert.com `
          /td sha256 `
          /fd sha256 `
          "$($exe.FullName)"

      - name: Verify Signature
        run: |
         $exe = Get-ChildItem -Recurse extracted\Espressif-IDE\espressif-ide.exe | Select-Object -First 1
         $signtool = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits" -Recurse -Name "signtool.exe" | Select-Object -First 1
         & "C:\Program Files (x86)\Windows Kits\$signtool" verify `
         /pa `
         $exe.FullName

      - name: Removing original ZIP from extracted folder
        run: |
           Remove-Item -Force artifacts\*.zip

      - name: Delete the unsigned Binary
        uses: geekyeggo/delete-artifact@v5
        with:
          name: espressif-ide-win32
          failOnError: false

      - name: Upload Signed Windows ZIP
        uses: actions/upload-artifact@v4
        with:
          name: espressif-ide-win32
          path: extracted/
          overwrite: true
          if-no-files-found: error

  upload-aws:
   runs-on: macos-latest
   needs: windows-sign
   env:
     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
   steps:
    - uses: actions/checkout@v3

    - name: Download built windows artifact
      uses: actions/download-artifact@v4
      with:
        name: espressif-ide-win32
        path: artifacts/win32

    - name: Download built linux artifact
      uses: actions/download-artifact@v4
      with:
        name: espressif-ide-linux
        path: artifacts/linux

    - name: Download macOS x86_64 dmg
      uses: actions/download-artifact@v4
      with:
        name: espressif-ide-macosx-cocoa-x86_64
        path: artifacts/macos_x86

    - name: Download macOS aarch64 dmg
      uses: actions/download-artifact@v4
      with:
        name: espressif-ide-macosx.cocoa.aarch64
        path: artifacts/macos_arm

    - name: Download update site zip
      uses: actions/download-artifact@v4
      with:
        name: com.espressif.idf.update
        path: artifacts/update

    - name: Extract version from tag and prepare folder
      id: get_version
      run: |
        TAG="${GITHUB_REF##*/}"
        VERSION="${TAG#v}"
        if [[ "$TAG" == *"-beta"* ]]; then
          IS_BETA="true"
          UPLOAD_PATH="beta"
          REDIRECT_PATH="beta"
        else
          IS_BETA="false"
          UPLOAD_PATH="latest"
          REDIRECT_PATH="latest"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "IS_BETA=$IS_BETA" >> $GITHUB_ENV
        echo "UPLOAD_PATH=$UPLOAD_PATH" >> $GITHUB_ENV
        echo "REDIRECT_PATH=$REDIRECT_PATH" >> $GITHUB_ENV
        echo "FOLDER=v$VERSION" >> $GITHUB_ENV
        echo "TAG=$TAG" >> $GITHUB_ENV

    - name: Rename DMGs with version suffix
      run: |
        VERSION="${{ env.VERSION }}"
        mv artifacts/macos_x86/Espressif-IDE-macosx-cocoa-x86_64.dmg "artifacts/macos_x86/Espressif-IDE-macosx-cocoa-x86_64-v$VERSION.dmg"
        mv artifacts/macos_arm/Espressif-IDE-macosx-cocoa-aarch64.dmg "artifacts/macos_arm/Espressif-IDE-macosx-cocoa-aarch64-v$VERSION.dmg"

    - name: Compress the update and win32 artifacts
      run: |
        VERSION="${{ env.VERSION }}"
        zip -r "com.espressif.idf.update-v$VERSION.zip" artifacts/update/*
        zip -r "Espressif-IDE-$VERSION-win32.win32.x86_64.zip" artifacts/win32/*

    - name: Listing files for upload to verify and debug
      run: |
         VERSION="${{ env.VERSION }}"
         ls  "com.espressif.idf.update-v$VERSION.zip"
         ls "Espressif-IDE-$VERSION-win32.win32.x86_64.zip"
         ls artifacts/macos_x86/*
         ls artifacts/macos_arm/*
         ls artifacts/linux/*

    - name: Upload build assets to dl.espressif.com
      run: |
        VERSION="${{ env.VERSION }}"
        UPLOAD_PATH="${{ env.UPLOAD_PATH }}"
        REDIRECT_PATH="${{ env.REDIRECT_PATH }}"

        aws s3 rm "s3://${{ secrets.DL_BUCKET }}/dl/idf-eclipse-plugin/updates/$UPLOAD_PATH" --recursive

        # Extract the update site from the versioned zip and upload its contents
        TMP_UPDATE_DIR="update_site_tmp"
        mkdir -p "$TMP_UPDATE_DIR"
        unzip -q "com.espressif.idf.update-v$VERSION.zip" -d "$TMP_UPDATE_DIR"
        echo "Contents of $TMP_UPDATE_DIR:"
        ls -l "$TMP_UPDATE_DIR"
        aws s3 cp --acl=public-read --recursive "$TMP_UPDATE_DIR/artifacts/update/" "s3://${{ secrets.DL_BUCKET }}/dl/idf-eclipse-plugin/updates/$UPLOAD_PATH"
        aws s3 cp --acl=public-read --recursive "$TMP_UPDATE_DIR/artifacts/update/" "s3://${{ secrets.DL_BUCKET }}/dl/idf-eclipse-plugin/updates/v$VERSION"
        aws s3 cp --acl=public-read ./releng/index.html "s3://${{ secrets.DL_BUCKET }}/dl/idf-eclipse-plugin/updates/$UPLOAD_PATH/"
        
        aws s3 cp --acl=public-read "com.espressif.idf.update-v$VERSION.zip" "s3://${{ secrets.DL_BUCKET }}/dl/idf-eclipse-plugin/updates/"
        aws s3 cp --acl=public-read --recursive artifacts/linux/ "s3://${{ secrets.DL_BUCKET }}/dl/idf-eclipse-plugin/ide/"
        aws s3 cp --acl=public-read "artifacts/macos_x86/Espressif-IDE-macosx-cocoa-x86_64-v$VERSION.dmg" "s3://${{ secrets.DL_BUCKET }}/dl/idf-eclipse-plugin/ide/"
        aws s3 cp --acl=public-read "artifacts/macos_arm/Espressif-IDE-macosx-cocoa-aarch64-v$VERSION.dmg" "s3://${{ secrets.DL_BUCKET }}/dl/idf-eclipse-plugin/ide/"
        aws s3 cp --acl=public-read "Espressif-IDE-$VERSION-win32.win32.x86_64.zip" "s3://${{ secrets.DL_BUCKET }}/dl/idf-eclipse-plugin/ide/"

        aws cloudfront create-invalidation --distribution-id ${{ secrets.DL_DISTRIBUTION_ID }} --paths "/dl/idf-eclipse-plugin/updates/$UPLOAD_PATH/*"

        aws s3api put-object --acl=public-read --bucket espdldata --key "dl/idf-eclipse-plugin/ide/Espressif-IDE-win32.win32.x86_64/$REDIRECT_PATH" --website-redirect-location "/dl/idf-eclipse-plugin/ide/Espressif-IDE-$VERSION-win32.win32.x86_64.zip"

        aws s3api put-object --acl=public-read --bucket espdldata --key "dl/idf-eclipse-plugin/ide/Espressif-IDE-macosx-cocoa-x86_64/$REDIRECT_PATH" --website-redirect-location "/dl/idf-eclipse-plugin/ide/Espressif-IDE-macosx-cocoa-x86_64-v$VERSION.dmg"

        aws s3api put-object --acl=public-read --bucket espdldata --key "dl/idf-eclipse-plugin/ide/Espressif-IDE-macosx-cocoa-aarch64/$REDIRECT_PATH" --website-redirect-location "/dl/idf-eclipse-plugin/ide/Espressif-IDE-macosx-cocoa-aarch64-v$VERSION.dmg"

        aws s3api put-object --acl=public-read --bucket espdldata --key "dl/idf-eclipse-plugin/ide/Espressif-IDE-linux.gtk.x86_64/$REDIRECT_PATH" --website-redirect-location "/dl/idf-eclipse-plugin/ide/Espressif-IDE-$VERSION-linux.gtk.x86_64.tar.gz"
